产生式,Predict集
Program->ProgramHead DeclarePart ProgramBody,{ PROGRAM }
ProgramHead->PROGRAM ProgramName,{ PROGRAM }
ProgramName->ID,{ ID }
DeclarePart->TypeDec VarDec ProcDec,{ BEGIN PROCEDURE TYPE VAR }
TypeDec->@,{ BEGIN PROCEDURE VAR }
TypeDec->TypeDeclaration,{ TYPE }
TypeDeclaration->TYPE TypeDecList,{ TYPE }
TypeDecList->TypeId = TypeName ; TypeDecMore,{ ID }
TypeDecMore->@,{ BEGIN PROCEDURE VAR }
TypeDecMore->TypeDecList,{ ID }
TypeId->ID,{ ID }
TypeName->BaseType,{ CHAR INTEGER }
TypeName->StructureType,{ ARRAY RECORD }
TypeName->ID,{ ID }
BaseType->INTEGER,{ INTEGER }
BaseType->CHAR,{ CHAR }
StructureType->ArrayType,{ ARRAY }
StructureType->RecType,{ RECORD }
ArrayType->ARRAY [ Low .. Top ] OF BaseType,{ ARRAY }
Low->INTC,{ INTC }
Top->INTC,{ INTC }
RecType->RECORD FieldDecList END,{ RECORD }
FieldDecList->BaseType IdList ; FieldDecMore,{ CHAR INTEGER }
FieldDecList->ArrayType IdList ; FieldDecMore,{ ARRAY }
FieldDecMore->@,{ END }
FieldDecMore->FieldDecList,{ ARRAY CHAR INTEGER }
IdList->ID IdMore,{ ID }
IdMore->@,{ ; }
IdMore->COMMA IdList,{ COMMA }
VarDec->@,{ BEGIN PROCEDURE }
VarDec->VarDeclaration,{ VAR }
VarDeclaration->VAR VarDecList,{ VAR }
VarDecList->TypeName VarIdList ; VarDecMore,{ ARRAY CHAR ID INTEGER RECORD }
VarDecMore->@,{ BEGIN PROCEDURE }
VarDecMore->VarDecList,{ ARRAY CHAR ID INTEGER RECORD }
VarIdList->ID VarIdMore,{ ID }
VarIdMore->@,{ ; }
VarIdMore->COMMA VarIdList,{ COMMA }
ProcDec->@,{ BEGIN }
ProcDec->ProcDeclaration,{ PROCEDURE }
ProcDeclaration->PROCEDURE ProcName ( ParamList ) ; ProcDecPart ProcBody ProcDecMore,{ PROCEDURE }
ProcDecMore->@,{ BEGIN }
ProcDecMore->ProcDeclaration,{ PROCEDURE }
ProcName->ID,{ ID }
ParamList->@,{ ) }
ParamList->ParamDecList,{ ARRAY CHAR ID INTEGER RECORD VAR }
ParamDecList->Param ParamMore,{ ARRAY CHAR ID INTEGER RECORD VAR }
ParamMore->@,{ ) }
ParamMore->; ParamDecList,{ ; }
Param->TypeName FormList,{ ARRAY CHAR ID INTEGER RECORD }
Param->VAR TypeName FormList,{ VAR }
FormList->ID FidMore,{ ID }
FidMore->@,{ ) ; }
FidMore->COMMA FormList,{ COMMA }
ProcDecPart->DeclarePart,{ BEGIN PROCEDURE TYPE VAR }
ProcBody->ProgramBody,{ BEGIN }
ProgramBody->BEGIN StmList END,{ BEGIN }
StmList->Stm StmMore,{ ID IF READ RETURN WHILE WRITE }
StmMore->@,{ ELSE END ENDWH FI }
StmMore->; StmList,{ ; }
Stm->ConditionalStm,{ IF }
Stm->LoopStm,{ WHILE }
Stm->InputStm,{ READ }
Stm->OutputStm,{ WRITE }
Stm->ReturnStm,{ RETURN }
Stm->ID AssCall,{ ID }
AssCall->AssignmentRest,{ . := [ }
AssCall->CallStmRest,{ ( }
AssignmentRest->VariMore := Exp,{ . := [ }
ConditionalStm->IF RelExp THEN StmList ELSE StmList FI,{ IF }
LoopStm->WHILE RelExp DO StmList ENDWH,{ WHILE }
InputStm->READ ( Invar ),{ READ }
Invar->ID,{ ID }
OutputStm->WRITE ( Exp ),{ WRITE }
ReturnStm->RETURN ( Exp ),{ RETURN }
CallStmRest->( ActParamList ),{ ( }
ActParamList->@,{ ) }
ActParamList->Exp ActParamMore,{ ( ID INTC }
ActParamMore->@,{ ) }
ActParamMore->COMMA ActParamList,{ COMMA }
RelExp->Exp OtherRelE,{ ( ID INTC }
OtherRelE->CmpOp Exp,{ < = }
Exp->Term OtherTerm,{ ( ID INTC }
OtherTerm->@,{ ) COMMA ; < = DO ELSE END ENDWH FI THEN ] }
OtherTerm->AddOp Exp,{ + - }
Term->Factor OtherFactor,{ ( ID INTC }
OtherFactor->@,{ ) + COMMA - ; < = DO ELSE END ENDWH FI THEN ] }
OtherFactor->MultOp Term,{ * / }
Factor->( Exp ),{ ( }
Factor->INTC,{ INTC }
Factor->Variable,{ ID }
Variable->ID VariMore,{ ID }
VariMore->@,{ ) * + COMMA - / := ; < = DO ELSE END ENDWH FI THEN ] }
VariMore->[ Exp ],{ [ }
VariMore->. FieldVar,{ . }
FieldVar->ID FieldVarMore,{ ID }
FieldVarMore->@,{ ) * + COMMA - / := ; < = DO ELSE END ENDWH FI THEN ] }
FieldVarMore->[ Exp ],{ [ }
CmpOp-><,{ < }
CmpOp->=,{ = }
AddOp->+,{ + }
AddOp->-,{ - }
MultOp->*,{ * }
MultOp->/,{ / }
